// ==========================================================================
// API FINANCIAL - CENTRALIZA√á√ÉO DE ROTAS E HELPERS
// ==========================================================================
// Prop√≥sito: Centralizar TODAS as rotas da API em um √∫nico arquivo
// Padr√£o: ROUTES_MAP + helpers ass√≠ncronos para cada endpoint
// Arquitetura: Elimina chamadas HTTP soltas nos componentes
// Uso: import { login, getTransactions, ... } from '@/apis/api-financial.js'

import { api } from 'boot/axios'
import { 
  handleApiError, 
  buildQueryString, 
  normalizeApiResponse 
} from '@/utils/apiUtils'

// ==========================================================================
// 1) MAPA CENTRALIZADO DE ROTAS
// ==========================================================================

/**
 * Mapa centralizado com TODAS as rotas da API
 * Organizado por dom√≠nio/recurso para f√°cil manuten√ß√£o
 */
export const API_ROUTES = {
  // ========== AUTENTICA√á√ÉO ==========
  auth: {
    login: '/auth/login',
    register: '/auth/register',
    me: '/auth/me',
    logout: '/auth/logout',
  },

  // ========== TRANSA√á√ïES ==========
  transactions: {
    list: '/transactions',
    create: '/transactions',
    update: (id) => `/transactions/${id}`,
    delete: (id) => `/transactions/${id}`,
    getById: (id) => `/transactions/${id}`,
    stats: '/transactions/stats',
    reports: '/transactions/reports',
  },

  // ========== USU√ÅRIO ==========
  users: {
    profile: '/users/profile',
    password: '/users/password',
    settings: '/users/settings',
    avatar: '/users/avatar',
    plan: '/users/plan',
    stats: '/users/stats',
    account: '/users/account',
  },

  // ========== ADMIN ==========
  admin: {
    users: '/admin/users',
    stats: '/admin/stats',
    userById: (id) => `/admin/users/${id}`,
  },

  // ========== DASHBOARD ==========
  dashboard: {
    stats: '/dashboard/stats',
    summary: '/dashboard/summary',
    charts: '/dashboard/charts',
  },

  // ========== PLANOS ==========
  plans: {
    list: '/plans',
    getById: (id) => `/plans/${id}`,
  }
}

// ==========================================================================
// 2) HELPERS DE AUTENTICA√á√ÉO
// ==========================================================================

/**
 * Realiza login do usu√°rio
 * @param {Object} credentials - { email, password }
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - { token, user }
 */
export async function login(credentials, options = {}) {
  try {
    console.log('üîê [API] Login:', credentials.email)

    const response = await api.post(API_ROUTES.auth.login, {
      email: credentials.email,
      password: credentials.password
    }, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Login bem-sucedido')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Registra novo usu√°rio
 * @param {Object} userData - { name, email, password }
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - { token, user }
 */
export async function register(userData, options = {}) {
  try {
    console.log('üìù [API] Registro:', userData.email)

    const response = await api.post(API_ROUTES.auth.register, {
      name: userData.name,
      email: userData.email,
      password: userData.password
    }, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Registro bem-sucedido')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Busca dados do usu√°rio autenticado
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Dados do usu√°rio
 */
export async function getMe(options = {}) {
  try {
    console.log('üë§ [API] Buscando usu√°rio atual')

    const response = await api.get(API_ROUTES.auth.me, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Usu√°rio obtido')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

// ==========================================================================
// 3) HELPERS DE TRANSA√á√ïES
// ==========================================================================

/**
 * Lista transa√ß√µes com filtros e pagina√ß√£o
 * @param {Object} filters - { type, category, startDate, endDate, page, limit }
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Array>} - Lista de transa√ß√µes
 */
export async function getTransactions(filters = {}, options = {}) {
  try {
    console.log('üí∞ [API] Listando transa√ß√µes:', filters)

    const queryString = buildQueryString(filters)
    const url = `${API_ROUTES.transactions.list}${queryString}`

    const response = await api.get(url, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Transa√ß√µes obtidas:', normalized.data?.length || 0)
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Cria nova transa√ß√£o
 * @param {Object} transactionData - Dados da transa√ß√£o
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Transa√ß√£o criada
 */
export async function createTransaction(transactionData, options = {}) {
  try {
    console.log('‚ûï [API] Criando transa√ß√£o:', transactionData.type)

    const response = await api.post(API_ROUTES.transactions.create, {
      type: transactionData.type,
      amount: Number(transactionData.amount),
      description: transactionData.description,
      category: transactionData.category,
      date: transactionData.date
    }, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Transa√ß√£o criada')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Atualiza transa√ß√£o existente
 * @param {string|number} id - ID da transa√ß√£o
 * @param {Object} transactionData - Dados atualizados
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Transa√ß√£o atualizada
 */
export async function updateTransaction(id, transactionData, options = {}) {
  try {
    console.log('‚úèÔ∏è [API] Atualizando transa√ß√£o:', id)

    const response = await api.put(API_ROUTES.transactions.update(id), {
      type: transactionData.type,
      amount: Number(transactionData.amount),
      description: transactionData.description,
      category: transactionData.category,
      date: transactionData.date
    }, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Transa√ß√£o atualizada')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Deleta transa√ß√£o
 * @param {string|number} id - ID da transa√ß√£o
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Confirma√ß√£o
 */
export async function deleteTransaction(id, options = {}) {
  try {
    console.log('üóëÔ∏è [API] Deletando transa√ß√£o:', id)

    const response = await api.delete(API_ROUTES.transactions.delete(id), options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Transa√ß√£o deletada')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Busca transa√ß√£o por ID
 * @param {string|number} id - ID da transa√ß√£o
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Dados da transa√ß√£o
 */
export async function getTransactionById(id, options = {}) {
  try {
    console.log('üîç [API] Buscando transa√ß√£o:', id)

    const response = await api.get(API_ROUTES.transactions.getById(id), options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Transa√ß√£o encontrada')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Busca estat√≠sticas financeiras
 * @param {Object} dateRange - { startDate, endDate }
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Estat√≠sticas
 */
export async function getTransactionStats(dateRange = {}, options = {}) {
  try {
    console.log('üìä [API] Buscando estat√≠sticas:', dateRange)

    const queryString = buildQueryString(dateRange)
    const url = `${API_ROUTES.transactions.stats}${queryString}`

    const response = await api.get(url, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Estat√≠sticas obtidas')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Busca relat√≥rios financeiros
 * @param {Object} filters - { startDate, endDate }
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Dados de relat√≥rios
 */
export async function getTransactionReports(filters = {}, options = {}) {
  try {
    console.log('üìä [API] Buscando relat√≥rios:', filters)

    const queryString = buildQueryString(filters)
    const url = `${API_ROUTES.transactions.reports}${queryString}`

    const response = await api.get(url, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Relat√≥rios obtidos')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

// ==========================================================================
// 4) HELPERS DE USU√ÅRIO
// ==========================================================================

/**
 * Busca perfil atual do usu√°rio
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Dados do perfil
 */
export async function getUserProfile(options = {}) {
  try {
    console.log('üìã [API] Buscando perfil')

    const response = await api.get(API_ROUTES.users.profile, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Perfil obtido')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Atualiza perfil do usu√°rio
 * @param {Object} profileData - { name, email, company, phone }
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Perfil atualizado
 */
export async function updateUserProfile(profileData, options = {}) {
  try {
    console.log('üë§ [API] Atualizando perfil')

    const response = await api.put(API_ROUTES.users.profile, {
      name: profileData.name,
      email: profileData.email,
      company: profileData.company || null,
      phone: profileData.phone || null
    }, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Perfil atualizado')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Altera senha do usu√°rio
 * @param {Object} passwordData - { currentPassword, newPassword }
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Confirma√ß√£o
 */
export async function changePassword(passwordData, options = {}) {
  try {
    console.log('üîí [API] Alterando senha')

    const response = await api.put(API_ROUTES.users.password, {
      currentPassword: passwordData.currentPassword,
      newPassword: passwordData.newPassword
    }, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Senha alterada')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Upload de avatar do usu√°rio
 * @param {File} file - Arquivo de imagem
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<string>} - URL do avatar
 */
export async function uploadAvatar(file, options = {}) {
  try {
    console.log('üì∑ [API] Upload de avatar:', file.name)

    const formData = new FormData()
    formData.append('avatar', file)

    const response = await api.post(API_ROUTES.users.avatar, formData, {
      ...options,
      headers: {
        'Content-Type': 'multipart/form-data',
        ...options.headers
      }
    })

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Avatar atualizado')
    return normalized.data.avatarUrl || normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Remove avatar do usu√°rio
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Confirma√ß√£o
 */
export async function removeAvatar(options = {}) {
  try {
    console.log('üóëÔ∏è [API] Removendo avatar')

    const response = await api.delete(API_ROUTES.users.avatar, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Avatar removido')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Busca configura√ß√µes do usu√°rio
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Configura√ß√µes
 */
export async function getUserSettings(options = {}) {
  try {
    console.log('‚öôÔ∏è [API] Buscando configura√ß√µes')

    const response = await api.get(API_ROUTES.users.settings, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Configura√ß√µes obtidas')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Atualiza configura√ß√µes do usu√°rio
 * @param {Object} settings - Configura√ß√µes a atualizar
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Configura√ß√µes atualizadas
 */
export async function updateUserSettings(settings, options = {}) {
  try {
    console.log('‚öôÔ∏è [API] Atualizando configura√ß√µes')

    const response = await api.put(API_ROUTES.users.settings, settings, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Configura√ß√µes atualizadas')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Altera plano do usu√°rio
 * @param {string|number} planId - ID do novo plano
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Dados do novo plano
 */
export async function changeUserPlan(planId, options = {}) {
  try {
    console.log('üí≥ [API] Alterando plano:', planId)

    const response = await api.put(API_ROUTES.users.plan, { planId }, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Plano alterado')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Busca estat√≠sticas do usu√°rio
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Estat√≠sticas
 */
export async function getUserStats(options = {}) {
  try {
    console.log('üìà [API] Buscando estat√≠sticas do usu√°rio')

    const response = await api.get(API_ROUTES.users.stats, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Estat√≠sticas obtidas')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Deleta conta do usu√°rio
 * @param {string} confirmation - Texto de confirma√ß√£o
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Confirma√ß√£o
 */
export async function deleteUserAccount(confirmation, options = {}) {
  try {
    console.log('‚ö†Ô∏è [API] Deletando conta - IRREVERS√çVEL')

    const response = await api.delete(API_ROUTES.users.account, {
      ...options,
      data: { confirmation }
    })

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Conta deletada')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

// ==========================================================================
// 5) HELPERS DE ADMIN
// ==========================================================================

/**
 * Lista usu√°rios (admin)
 * @param {Object} filters - Filtros de busca
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Array>} - Lista de usu√°rios
 */
export async function getAdminUsers(filters = {}, options = {}) {
  try {
    console.log('üë• [API] Listando usu√°rios (admin)')

    const queryString = buildQueryString(filters)
    const url = `${API_ROUTES.admin.users}${queryString}`

    const response = await api.get(url, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Usu√°rios obtidos')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Busca estat√≠sticas do sistema (admin)
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Estat√≠sticas do sistema
 */
export async function getAdminStats(options = {}) {
  try {
    console.log('üìä [API] Buscando estat√≠sticas do sistema (admin)')

    const response = await api.get(API_ROUTES.admin.stats, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Estat√≠sticas do sistema obtidas')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Atualiza usu√°rio (admin)
 * @param {string|number} userId - ID do usu√°rio
 * @param {Object} userData - Dados a atualizar
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Usu√°rio atualizado
 */
export async function updateAdminUser(userId, userData, options = {}) {
  try {
    console.log('‚úèÔ∏è [API] Atualizando usu√°rio (admin):', userId)

    const response = await api.put(API_ROUTES.admin.userById(userId), userData, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Usu√°rio atualizado')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

// ==========================================================================
// 6) HELPERS DE DASHBOARD
// ==========================================================================

/**
 * Busca estat√≠sticas do dashboard
 * @param {Object} filters - Filtros de data
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Dados do dashboard
 */
export async function getDashboardStats(filters = {}, options = {}) {
  try {
    console.log('üìä [API] Buscando estat√≠sticas do dashboard')

    const queryString = buildQueryString(filters)
    const url = `${API_ROUTES.dashboard.stats}${queryString}`

    const response = await api.get(url, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Estat√≠sticas do dashboard obtidas')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Busca resumo do dashboard
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Resumo do dashboard
 */
export async function getDashboardSummary(options = {}) {
  try {
    console.log('üìã [API] Buscando resumo do dashboard')

    const response = await api.get(API_ROUTES.dashboard.summary, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Resumo do dashboard obtido')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Busca dados para gr√°ficos do dashboard
 * @param {Object} filters - Filtros de data
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Dados dos gr√°ficos
 */
export async function getDashboardCharts(filters = {}, options = {}) {
  try {
    console.log('üìà [API] Buscando dados de gr√°ficos')

    const queryString = buildQueryString(filters)
    const url = `${API_ROUTES.dashboard.charts}${queryString}`

    const response = await api.get(url, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Dados de gr√°ficos obtidos')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

// ==========================================================================
// 7) HELPERS DE PLANOS
// ==========================================================================

/**
 * Lista planos dispon√≠veis
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Array>} - Lista de planos
 */
export async function getPlans(options = {}) {
  try {
    console.log('üí≥ [API] Listando planos')

    const response = await api.get(API_ROUTES.plans.list, options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Planos obtidos')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

/**
 * Busca plano por ID
 * @param {string|number} planId - ID do plano
 * @param {Object} options - Op√ß√µes adicionais
 * @returns {Promise<Object>} - Dados do plano
 */
export async function getPlanById(planId, options = {}) {
  try {
    console.log('üîç [API] Buscando plano:', planId)

    const response = await api.get(API_ROUTES.plans.getById(planId), options)

    const normalized = normalizeApiResponse(response)

    console.log('‚úÖ [API] Plano encontrado')
    return normalized.data
  } catch (error) {
    return Promise.reject(handleApiError(error, options))
  }
}

// ==========================================================================
// 8) CONSTANTES E HELPERS UTILIT√ÅRIOS
// ==========================================================================

/**
 * Categorias padr√£o do sistema
 */
export const DEFAULT_CATEGORIES = {
  income: [
    'Vendas',
    'Servi√ßos',
    'Produtos',
    'Consultoria',
    'Comiss√µes',
    'Investimentos',
    'Outras Receitas'
  ],
  expense: [
    'Fornecedores',
    'Sal√°rios',
    'Aluguel',
    'Marketing',
    'Escrit√≥rio',
    'Impostos',
    'Manuten√ß√£o',
    'Combust√≠vel',
    'Telefone/Internet',
    'Outras Despesas'
  ]
}

/**
 * Retorna todas as categorias (receitas + despesas)
 * @returns {Array<string>} - Lista de categorias
 */
export function getAllCategories() {
  return [...DEFAULT_CATEGORIES.income, ...DEFAULT_CATEGORIES.expense]
}

/**
 * Retorna categorias por tipo
 * @param {string} type - 'income' ou 'expense'
 * @returns {Array<string>} - Lista de categorias do tipo
 */
export function getCategoriesByType(type) {
  return DEFAULT_CATEGORIES[type] || []
}
