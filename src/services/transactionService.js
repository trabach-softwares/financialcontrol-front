// ==========================================================================
// TRANSACTION SERVICE - SERVI√áOS DE TRANSA√á√ïES FINANCEIRAS
// ==========================================================================
// Prop√≥sito: Encapsular CRUD completo de transa√ß√µes e estat√≠sticas
// Origem: Componentes Vue, Stores Pinia, P√°ginas de transa√ß√µes
// Destino: API REST http://localhost:3000/api/transactions/*
// Efeitos: Gerenciamento completo do fluxo financeiro

import { api } from 'boot/axios'

/**
 * Servi√ßos de transa√ß√µes que encapsulam todas as opera√ß√µes CRUD
 * Inclui filtros, pagina√ß√£o, estat√≠sticas e categorias
 */
export const transactionService = {

  // ==========================================================================
  // LISTAR TRANSA√á√ïES - GET /transactions
  // ==========================================================================
  /**
   * Busca transa√ß√µes com filtros e pagina√ß√£o
   * Origem: P√°gina de transa√ß√µes, dashboard, relat√≥rios
   * Destino: GET /transactions?type&category&startDate&endDate&page&limit
   * Retorna: { transactions: [], total, page, totalPages }
   * Efeitos: Lista paginada com filtros aplicados
   */
  async getTransactions(filters = {}) {
    console.log('üí∞ Buscando transa√ß√µes com filtros:', filters)
    
    // Construir query parameters
    const params = new URLSearchParams()
    
    if (filters.type) params.append('type', filters.type)
    if (filters.category) params.append('category', filters.category)
    if (filters.startDate) params.append('startDate', filters.startDate)
    if (filters.endDate) params.append('endDate', filters.endDate)
    if (filters.page) params.append('page', filters.page)
    if (filters.limit) params.append('limit', filters.limit)
    
    const queryString = params.toString()
    const url = `/transactions${queryString ? `?${queryString}` : ''}`
    
    const response = await api.get(url)
    
    // Validar estrutura da API conforme documenta√ß√£o
    if (!response.data.success) {
      throw new Error(response.data.message || 'Failed to get transactions')
    }
    
    const transactions = response.data.data
    
    console.log('‚úÖ Transa√ß√µes obtidas:', {
      count: Array.isArray(transactions) ? transactions.length : 0,
      filters: filters
    })
    
    return transactions
  },

  // ==========================================================================
  // CRIAR TRANSA√á√ÉO - POST /transactions
  // ==========================================================================
  /**
   * Cria nova transa√ß√£o financeira
   * Origem: Formul√°rio de nova transa√ß√£o
   * Destino: POST /transactions
   * Retorna: Dados da transa√ß√£o criada
   * Efeitos: Nova transa√ß√£o adicionada ao sistema
   */
  async createTransaction(transactionData) {
    console.log('‚ûï Criando nova transa√ß√£o:', {
      type: transactionData.type,
      amount: transactionData.amount,
      category: transactionData.category
    })
    
    const response = await api.post('/transactions', {
      type: transactionData.type,           // 'income' | 'expense'
      amount: Number(transactionData.amount),
      description: transactionData.description,
      category: transactionData.category,
      date: transactionData.date
    })
    
    console.log('‚úÖ Transa√ß√£o criada com sucesso:', response.data.id)
    return response.data
  },

  // ==========================================================================
  // ATUALIZAR TRANSA√á√ÉO - PUT /transactions/:id
  // ==========================================================================
  /**
   * Atualiza transa√ß√£o existente
   * Origem: Formul√°rio de edi√ß√£o de transa√ß√£o
   * Destino: PUT /transactions/:id
   * Retorna: Dados da transa√ß√£o atualizada
   * Efeitos: Transa√ß√£o modificada no sistema
   */
  async updateTransaction(id, transactionData) {
    console.log('‚úèÔ∏è Atualizando transa√ß√£o:', id, {
      type: transactionData.type,
      amount: transactionData.amount
    })
    
    const response = await api.put(`/transactions/${id}`, {
      type: transactionData.type,
      amount: Number(transactionData.amount),
      description: transactionData.description,
      category: transactionData.category,
      date: transactionData.date
    })
    
    console.log('‚úÖ Transa√ß√£o atualizada com sucesso:', id)
    return response.data
  },

  // ==========================================================================
  // DELETAR TRANSA√á√ÉO - DELETE /transactions/:id
  // ==========================================================================
  /**
   * Remove transa√ß√£o do sistema
   * Origem: Lista de transa√ß√µes, a√ß√£o de deletar
   * Destino: DELETE /transactions/:id
   * Retorna: Confirma√ß√£o da exclus√£o
   * Efeitos: Transa√ß√£o removida permanentemente
   */
  async deleteTransaction(id) {
    console.log('üóëÔ∏è Deletando transa√ß√£o:', id)
    
    const response = await api.delete(`/transactions/${id}`)
    
    console.log('‚úÖ Transa√ß√£o deletada com sucesso:', id)
    return response.data
  },

  // ==========================================================================
  // ESTAT√çSTICAS FINANCEIRAS - GET /transactions/stats
  // ==========================================================================
  /**
   * Busca estat√≠sticas financeiras consolidadas
   * Origem: Dashboard, p√°gina de relat√≥rios
   * Destino: GET /transactions/stats?startDate&endDate
   * Retorna: { totalIncome, totalExpense, balance, transactionCount }
   * Efeitos: Dados para gr√°ficos e resumo financeiro
   */
  async getTransactionStats(dateRange = {}) {
    console.log('üìä Buscando estat√≠sticas financeiras:', dateRange)
    
    const params = new URLSearchParams()
    if (dateRange.startDate) params.append('startDate', dateRange.startDate)
    if (dateRange.endDate) params.append('endDate', dateRange.endDate)
    
    const queryString = params.toString()
    const url = `/transactions/stats${queryString ? `?${queryString}` : ''}`
    
    const response = await api.get(url)
    
    console.log('‚úÖ Estat√≠sticas obtidas:', {
      receitas: response.data.totalIncome,
      despesas: response.data.totalExpense,
      saldo: response.data.balance,
      total: response.data.transactionCount
    })
    
    return response.data
  },

  // ==========================================================================
  // BUSCAR TRANSA√á√ÉO POR ID - GET /transactions/:id
  // ==========================================================================
  /**
   * Busca uma transa√ß√£o espec√≠fica por ID
   * Origem: Formul√°rio de edi√ß√£o, visualiza√ß√£o de detalhes
   * Destino: GET /transactions/:id
   * Retorna: Dados completos da transa√ß√£o
   * Efeitos: Carregamento de dados para edi√ß√£o/visualiza√ß√£o
   */
  async getTransactionById(id) {
    console.log('üîç Buscando transa√ß√£o por ID:', id)
    
    const response = await api.get(`/transactions/${id}`)
    
    console.log('‚úÖ Transa√ß√£o encontrada:', response.data.id)
    return response.data
  },

  // ==========================================================================
  // CATEGORIAS PADR√ÉO
  // ==========================================================================
  /**
   * Retorna lista de categorias padr√£o do sistema
   * Prop√≥sito: Fornecer op√ß√µes para formul√°rios de transa√ß√£o
   * Origem: Componentes de formul√°rio, filtros
   * Retorna: Array de strings com nomes das categorias
   */
  getDefaultCategories() {
    return [
      // Receitas
      'Vendas',
      'Servi√ßos',
      'Produtos',
      'Consultoria',
      'Comiss√µes',
      'Investimentos',
      'Outras Receitas',
      
      // Despesas
      'Fornecedores',
      'Sal√°rios',
      'Aluguel',
      'Marketing',
      'Escrit√≥rio',
      'Impostos',
      'Manuten√ß√£o',
      'Combust√≠vel',
      'Telefone/Internet',
      'Outras Despesas'
    ]
  },

  // ==========================================================================
  // RELAT√ìRIOS E AN√ÅLISES - GET /transactions/reports
  // ==========================================================================
  /**
   * Busca dados para relat√≥rios e an√°lises financeiras
   * Origem: P√°gina de relat√≥rios, dashboard avan√ßado
   * Destino: GET /transactions/reports?startDate&endDate
   * Retorna: Dados agregados para gr√°ficos e an√°lises
   * Efeitos: Relat√≥rios detalhados com insights
   */
  async getReports(filters = {}) {
    console.log('üìä Buscando dados para relat√≥rios:', filters)
    
    const params = new URLSearchParams()
    if (filters.startDate) params.append('startDate', filters.startDate)
    if (filters.endDate) params.append('endDate', filters.endDate)
    
    const queryString = params.toString()
    const url = `/transactions/reports${queryString ? `?${queryString}` : ''}`
    
    const response = await api.get(url)
    
    console.log('‚úÖ Dados de relat√≥rios obtidos:', {
      totalTransactions: response.data.summary?.totalTransactions || 0,
      categoriesCount: response.data.categoryAnalysis?.length || 0,
      timelinePoints: response.data.timeline?.length || 0
    })
    
    return response.data
  }
}