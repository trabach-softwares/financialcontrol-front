// ==========================================================================
// ADMIN SERVICE - SERVI√áOS ADMINISTRATIVOS DO SISTEMA
// ==========================================================================
// Prop√≥sito: Encapsular opera√ß√µes administrativas e gerenciamento de usu√°rios
// Origem: P√°ginas administrativas, dashboard admin, gest√£o de planos
// Destino: API REST http://localhost:3000/api/admin/*
// Efeitos: Gest√£o completa de usu√°rios, planos e sistema

import { api } from 'boot/axios'

/**
 * Servi√ßos administrativos que encapsulam opera√ß√µes de gest√£o do sistema
 * Inclui gerenciamento de usu√°rios, planos e estat√≠sticas globais
 */
export const adminService = {

  // ==========================================================================
  // GERENCIAMENTO DE USU√ÅRIOS
  // ==========================================================================
  
  /**
   * Lista todos os usu√°rios do sistema com pagina√ß√£o e filtros
   * Origem: Dashboard admin, p√°gina de usu√°rios
   * Destino: GET /admin/users?page&limit&search&plan&status
   * Retorna: { users: [], total, page, totalPages }
   * Efeitos: Lista paginada de usu√°rios para administra√ß√£o
   */
  async getUsers(filters = {}) {
    console.log('üë• [ADMIN] Buscando usu√°rios do sistema:', filters)
    
    const params = new URLSearchParams()
    if (filters.page) params.append('page', filters.page)
    if (filters.limit) params.append('limit', filters.limit)
    if (filters.search) params.append('search', filters.search)
    if (filters.plan) params.append('plan', filters.plan)
    if (filters.status) params.append('status', filters.status)
    
    const queryString = params.toString()
    const url = `/admin/users${queryString ? `?${queryString}` : ''}`
    
    const response = await api.get(url)
    
    console.log('‚úÖ [ADMIN] Usu√°rios obtidos:', {
      total: response.data.total,
      count: response.data.users?.length || 0
    })
    
    return response.data
  },

  /**
   * Busca um usu√°rio espec√≠fico por ID
   * Origem: P√°gina de detalhes do usu√°rio, formul√°rio de edi√ß√£o
   * Destino: GET /admin/users/:id
   * Retorna: Dados completos do usu√°rio
   * Efeitos: Carregamento de dados para administra√ß√£o
   */
  async getUserById(id) {
    console.log('üîç [ADMIN] Buscando usu√°rio por ID:', id)
    
    const response = await api.get(`/admin/users/${id}`)
    
    console.log('‚úÖ [ADMIN] Usu√°rio encontrado:', response.data.id)
    return response.data
  },

  /**
   * Atualiza dados de um usu√°rio (apenas admin)
   * Origem: Formul√°rio de edi√ß√£o de usu√°rio admin
   * Destino: PUT /admin/users/:id
   * Retorna: Dados atualizados do usu√°rio
   * Efeitos: Modifica√ß√£o de dados pelo administrador
   */
  async updateUser(id, userData) {
    console.log('‚úèÔ∏è [ADMIN] Atualizando usu√°rio:', id, {
      name: userData.name,
      plan: userData.plan,
      status: userData.status
    })
    
    const response = await api.put(`/admin/users/${id}`, {
      name: userData.name,
      email: userData.email,
      plan: userData.plan,
      status: userData.status,
      company: userData.company
    })
    
    console.log('‚úÖ [ADMIN] Usu√°rio atualizado com sucesso:', id)
    return response.data
  },

  /**
   * Desativa/Ativa um usu√°rio
   * Origem: Lista de usu√°rios, a√ß√µes administrativas
   * Destino: PATCH /admin/users/:id/status
   * Retorna: Status atualizado do usu√°rio
   * Efeitos: Bloqueio/desbloqueio de acesso do usu√°rio
   */
  async toggleUserStatus(id, status) {
    console.log('üîÑ [ADMIN] Alterando status do usu√°rio:', id, 'para', status)
    
    const response = await api.patch(`/admin/users/${id}/status`, {
      status: status // 'active' | 'inactive' | 'suspended'
    })
    
    console.log('‚úÖ [ADMIN] Status do usu√°rio alterado:', id)
    return response.data
  },

  /**
   * Deleta um usu√°rio permanentemente
   * Origem: A√ß√£o administrativa cr√≠tica
   * Destino: DELETE /admin/users/:id
   * Retorna: Confirma√ß√£o da exclus√£o
   * Efeitos: Usu√°rio removido permanentemente do sistema
   */
  async deleteUser(id) {
    console.log('üóëÔ∏è [ADMIN] Deletando usu√°rio - A√á√ÉO IRREVERS√çVEL:', id)
    
    const response = await api.delete(`/admin/users/${id}`)
    
    console.log('‚úÖ [ADMIN] Usu√°rio deletado permanentemente:', id)
    return response.data
  },

  // ==========================================================================
  // GERENCIAMENTO DE PLANOS
  // ==========================================================================
  
  /**
   * Lista todos os planos dispon√≠veis
   * Origem: Dashboard admin, configura√ß√£o de planos
   * Destino: GET /admin/plans
   * Retorna: Array de planos com detalhes completos
   * Efeitos: Lista de planos para administra√ß√£o
   */
  async getPlans() {
    console.log('üìã [ADMIN] Buscando planos do sistema')
    
    const response = await api.get('/admin/plans')
    
    console.log('‚úÖ [ADMIN] Planos obtidos:', response.data.length)
    return response.data
  },

  /**
   * Cria um novo plano
   * Origem: Formul√°rio de cria√ß√£o de plano
   * Destino: POST /admin/plans
   * Retorna: Dados do plano criado
   * Efeitos: Novo plano dispon√≠vel no sistema
   */
  async createPlan(planData) {
    console.log('‚ûï [ADMIN] Criando novo plano:', planData.name)
    
    const response = await api.post('/admin/plans', {
      name: planData.name,
      description: planData.description,
      price: Number(planData.price),
      features: planData.features, // Array de strings
      transactionLimit: Number(planData.transactionLimit),
      isActive: planData.isActive
    })
    
    console.log('‚úÖ [ADMIN] Plano criado com sucesso:', response.data.id)
    return response.data
  },

  /**
   * Atualiza um plano existente
   * Origem: Formul√°rio de edi√ß√£o de plano
   * Destino: PUT /admin/plans/:id
   * Retorna: Dados do plano atualizado
   * Efeitos: Plano modificado no sistema
   */
  async updatePlan(id, planData) {
    console.log('‚úèÔ∏è [ADMIN] Atualizando plano:', id, planData.name)
    
    const response = await api.put(`/admin/plans/${id}`, {
      name: planData.name,
      description: planData.description,
      price: Number(planData.price),
      features: planData.features,
      transactionLimit: Number(planData.transactionLimit),
      isActive: planData.isActive
    })
    
    console.log('‚úÖ [ADMIN] Plano atualizado com sucesso:', id)
    return response.data
  },

  /**
   * Deleta um plano (se n√£o tiver usu√°rios associados)
   * Origem: A√ß√£o administrativa de remo√ß√£o
   * Destino: DELETE /admin/plans/:id
   * Retorna: Confirma√ß√£o da exclus√£o
   * Efeitos: Plano removido do sistema
   */
  async deletePlan(id) {
    console.log('üóëÔ∏è [ADMIN] Deletando plano:', id)
    
    const response = await api.delete(`/admin/plans/${id}`)
    
    console.log('‚úÖ [ADMIN] Plano deletado com sucesso:', id)
    return response.data
  },

  // ==========================================================================
  // ESTAT√çSTICAS GLOBAIS DO SISTEMA
  // ==========================================================================
  
  /**
   * Busca estat√≠sticas globais do sistema
   * Origem: Dashboard administrativo
   * Destino: GET /admin/stats
   * Retorna: M√©tricas completas do sistema
   * Efeitos: Dados para dashboard admin e relat√≥rios
   */
  async getSystemStats() {
    console.log('üìä [ADMIN] Buscando estat√≠sticas do sistema')
    
    const response = await api.get('/admin/stats')
    
    console.log('‚úÖ [ADMIN] Estat√≠sticas obtidas:', {
      totalUsers: response.data.totalUsers,
      totalTransactions: response.data.totalTransactions,
      revenue: response.data.revenue
    })
    
    return response.data
  },

  /**
   * Busca estat√≠sticas de uso por per√≠odo
   * Origem: Relat√≥rios administrativos, analytics
   * Destino: GET /admin/stats/usage?startDate&endDate
   * Retorna: Dados de uso detalhados por per√≠odo
   * Efeitos: An√°lise de crescimento e engajamento
   */
  async getUsageStats(dateRange = {}) {
    console.log('üìà [ADMIN] Buscando estat√≠sticas de uso:', dateRange)
    
    const params = new URLSearchParams()
    if (dateRange.startDate) params.append('startDate', dateRange.startDate)
    if (dateRange.endDate) params.append('endDate', dateRange.endDate)
    
    const queryString = params.toString()
    const url = `/admin/stats/usage${queryString ? `?${queryString}` : ''}`
    
    const response = await api.get(url)
    
    console.log('‚úÖ [ADMIN] Estat√≠sticas de uso obtidas')
    return response.data
  },

  // ==========================================================================
  // CONFIGURA√á√ïES GLOBAIS DO SISTEMA
  // ==========================================================================
  
  /**
   * Busca configura√ß√µes globais do sistema
   * Origem: P√°gina de configura√ß√µes administrativas
   * Destino: GET /admin/settings
   * Retorna: Configura√ß√µes globais edit√°veis
   * Efeitos: Carregamento de configura√ß√µes para edi√ß√£o
   */
  async getSystemSettings() {
    console.log('‚öôÔ∏è [ADMIN] Buscando configura√ß√µes do sistema')
    
    const response = await api.get('/admin/settings')
    
    console.log('‚úÖ [ADMIN] Configura√ß√µes obtidas')
    return response.data
  },

  /**
   * Atualiza configura√ß√µes globais do sistema
   * Origem: Formul√°rio de configura√ß√µes administrativas
   * Destino: PUT /admin/settings
   * Retorna: Configura√ß√µes atualizadas
   * Efeitos: Modifica√ß√£o de comportamento global do sistema
   */
  async updateSystemSettings(settings) {
    console.log('‚öôÔ∏è [ADMIN] Atualizando configura√ß√µes do sistema')
    
    const response = await api.put('/admin/settings', settings)
    
    console.log('‚úÖ [ADMIN] Configura√ß√µes atualizadas com sucesso')
    return response.data
  }
}