// ==========================================================================
// PINIA STORE - AUTHENTICATION (AUTH STORE)
// ==========================================================================
// Prop√≥sito: Gerenciar estado global de autentica√ß√£o e usu√°rio
// Origem: Login, registro, verifica√ß√£o de sess√£o, logout
// Efeitos: Estado reativo de auth em toda aplica√ß√£o

import { defineStore } from 'pinia'
import { authService } from 'src/services/authService'

export const useAuthStore = defineStore('auth', {
  // ==========================================================================
  // ESTADO (STATE)
  // ==========================================================================
  state: () => ({
    // Dados do usu√°rio logado
    user: null,                    // Objeto com dados completos do usu√°rio
    token: localStorage.getItem('auth_token') || null, // JWT token
    
    // Estados de loading
    isLoading: false,              // Loading geral de auth
    isLoggingIn: false,            // Loading espec√≠fico do login
    isRegistering: false,          // Loading espec√≠fico do registro
    
    // Estados de erro
    loginError: null,              // Erro do √∫ltimo login
    registerError: null,           // Erro do √∫ltimo registro
    
    // Estado de inicializa√ß√£o
    isInitialized: false,          // Se j√° verificou token inicial
  }),

  // ==========================================================================
  // GETTERS (COMPUTED)
  // ==========================================================================
  getters: {
    /**
     * Verifica se o usu√°rio est√° autenticado
     * @returns {boolean} True se h√° token e usu√°rio v√°lidos
     */
    isAuthenticated: (state) => {
      return !!(state.token && state.user)
    },

    /**
     * Retorna o nome do usu√°rio priorizando empresa > pessoa > email
     * @returns {string} Nome para exibi√ß√£o
     */
    userDisplayName: (state) => {
      if (!state.user) return ''
      
      // Prioridade: nome da empresa > nome da pessoa > email > 'Usu√°rio'
      return state.user.company_name || 
             state.user.name || 
             state.user.email || 
             'Usu√°rio'
    },

    /**
     * Verifica se o usu√°rio √© administrador
     * @returns {boolean} True se o usu√°rio tem role admin
     */
    isAdmin: (state) => {
      return state.user?.role === 'admin'
    },

    /**
     * Retorna o plano atual do usu√°rio
     * @returns {string} Nome do plano (FREE, BASIC, PREMIUM, etc)
     */
    userPlan: (state) => {
      // Se n√£o h√° usu√°rio, retorna FREE
      if (!state.user) return 'FREE'
      
      // Se h√° um plan_name no usu√°rio, usa ele
      if (state.user.plan_name) return state.user.plan_name.toUpperCase()
      
      // Se h√° plan_id, podemos tentar buscar da store de plans
      // Por enquanto, vamos assumir que plan_id null = FREE
      if (!state.user.plan_id) return 'FREE'
      
      // Caso tenha plan_id mas n√£o temos o nome, retorna um padr√£o
      return state.user.plan_type?.toUpperCase() || 'BASIC'
    },

    /**
     * Verifica se h√° algum processo de autentica√ß√£o em andamento
     * @returns {boolean} True se algum loading est√° ativo
     */
    isProcessing: (state) => {
      return state.isLoading || state.isLoggingIn || state.isRegistering
    }
  },

  // ==========================================================================
  // ACTIONS (METHODS)
  // ==========================================================================
  actions: {
    /**
     * Realiza login do usu√°rio
     * Origem: P√°gina de login, formul√°rio de login
     * Efeitos: Define token, carrega dados do usu√°rio, redireciona
     */
    async login(credentials) {
      console.log('üîê [AUTH STORE] Iniciando login para:', credentials.email)
      
      this.isLoggingIn = true
      this.loginError = null

      try {
        // Chama o servi√ßo de autentica√ß√£o
        const response = await authService.login(credentials)
        
        console.log('üîç [AUTH STORE] Resposta do authService:', response)
        
        // authService j√° retorna a estrutura correta (data.user + data.token)
        const { token, user: userData } = response
        
        console.log('üîç [AUTH STORE] Token extra√≠do:', token)
        console.log('üîç [AUTH STORE] User data extra√≠do:', userData)
        
        if (!token) {
          throw new Error('Token n√£o encontrado na resposta da API')
        }
        
        if (!userData || !userData.email) {
          throw new Error('Dados do usu√°rio n√£o encontrados na resposta da API')
        }
        
        // Armazena o token
        this.token = token
        localStorage.setItem('auth_token', token)
        
        // Usar dados do usu√°rio da resposta do login
        this.user = userData
        console.log('‚úÖ [AUTH STORE] Dados do usu√°rio obtidos do login:', userData.email)
        
        console.log('‚úÖ [AUTH STORE] Login realizado com sucesso')
        
        // Retorna sucesso para a p√°gina de login
        return { success: true, user: this.user }
        
      } catch (error) {
        console.error('‚ùå [AUTH STORE] Erro no login:', error.message)
        
        // Armazena erro para exibi√ß√£o
        this.loginError = error.response?.data?.message || 'Erro ao fazer login'
        
        // Limpa dados em caso de erro
        this.clearAuth()
        
        throw error
        
      } finally {
        this.isLoggingIn = false
      }
    },

    /**
     * Realiza registro de novo usu√°rio
     * Origem: P√°gina de registro, formul√°rio de cadastro
     * Efeitos: Cria conta e faz login autom√°tico
     */
    async register(userData) {
      console.log('üìù [AUTH STORE] Iniciando registro para:', userData.email)
      
      this.isRegistering = true
      this.registerError = null

      try {
        // Chama o servi√ßo de registro
        const response = await authService.register(userData)
        
        // Armazena o token (login autom√°tico ap√≥s registro)
        this.token = response.token
        localStorage.setItem('auth_token', response.token)
        
        // Carrega dados do usu√°rio
        await this.fetchUser()
        
        console.log('‚úÖ [AUTH STORE] Registro e login autom√°tico realizados')
        
        return { success: true, user: this.user }
        
      } catch (error) {
        console.error('‚ùå [AUTH STORE] Erro no registro:', error.message)
        
        // Armazena erro para exibi√ß√£o
        this.registerError = error.response?.data?.message || 'Erro ao criar conta'
        
        throw error
        
      } finally {
        this.isRegistering = false
      }
    },

    /**
     * Carrega dados do usu√°rio atual
     * Origem: Inicializa√ß√£o do app, refresh de dados
     * Efeitos: Atualiza dados do usu√°rio no estado
     */
    async fetchUser() {
      if (!this.token) {
        console.log('‚ö†Ô∏è [AUTH STORE] Sem token para buscar usu√°rio')
        return
      }

      console.log('üë§ [AUTH STORE] Carregando dados do usu√°rio')
      
      try {
        const userData = await authService.getMe()
        
        console.log('üîç [AUTH STORE] Resposta getMe:', userData)
        
        // authService j√° retorna os dados corretos do usu√°rio
        this.user = userData
        
        console.log('‚úÖ [AUTH STORE] Dados do usu√°rio carregados:', {
          id: userData.id,
          name: userData.name,
          email: userData.email,
          role: userData.role,
          plan_id: userData.plan_id
        })

        // Busca detalhes do plano se o usu√°rio tiver um plan_id
        await this.enrichUserPlan()
        
      } catch (error) {
        console.error('‚ùå [AUTH STORE] Erro ao carregar usu√°rio:', error.message)
        
        // Tratamento espec√≠fico para recurs√£o infinita
        if (error.message && error.message.includes('infinite recursion')) {
          console.error('üî• [AUTH STORE] Erro de recurs√£o infinita no fetchUser')
          this.clearAuth()
          throw new Error('Erro de configura√ß√£o no servidor - RLS com recurs√£o infinita')
        }
        
        // Se o token √© inv√°lido, limpa a autentica√ß√£o
        if (error.response?.status === 401) {
          console.log('üîÑ [AUTH STORE] Token inv√°lido, fazendo logout')
          this.logout()
        }
        
        throw error
      }
    },

    /**
     * Enriquece os dados do usu√°rio com informa√ß√µes do plano
     * Busca detalhes do plano atrav√©s do plan_id
     */
    async enrichUserPlan() {
      if (!this.user?.plan_id) {
        console.log('‚ÑπÔ∏è [AUTH STORE] Usu√°rio sem plan_id, assumindo plano FREE')
        return
      }

      try {
        // Importa dinamicamente a store de planos para evitar depend√™ncia circular
        const { usePlansStore } = await import('src/stores/plans')
        const plansStore = usePlansStore()
        
        // Busca os planos se ainda n√£o foram carregados
        if (plansStore.plans.length === 0) {
          await plansStore.fetchPlans()
        }
        
        // Encontra o plano do usu√°rio
        const userPlan = plansStore.getPlanById(this.user.plan_id)
        
        if (userPlan) {
          // Adiciona informa√ß√µes do plano ao usu√°rio
          this.user = {
            ...this.user,
            plan_name: userPlan.name,
            plan_type: userPlan.type || 'basic',
            plan_price: userPlan.price,
            plan_features: userPlan.features
          }
          
          console.log('‚úÖ [AUTH STORE] Plano do usu√°rio enriquecido:', {
            plan_name: userPlan.name,
            plan_type: userPlan.type
          })
        } else {
          console.warn('‚ö†Ô∏è [AUTH STORE] Plano n√£o encontrado para plan_id:', this.user.plan_id)
        }
        
      } catch (error) {
        console.error('‚ùå [AUTH STORE] Erro ao buscar plano do usu√°rio:', error.message)
        // N√£o falha se n√£o conseguir buscar o plano
      }
    },

    /**
     * Realiza logout do usu√°rio
     * Origem: Bot√£o de logout, expira√ß√£o de token
     * Efeitos: Limpa estado e localStorage, redireciona para login
     */
    async logout() {
      console.log('üö™ [AUTH STORE] Realizando logout')
      
      try {
        // Chama o servi√ßo de logout se h√° token
        if (this.token) {
          await authService.logout()
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è [AUTH STORE] Erro no logout (continuando):', error.message)
      } finally {
        // Sempre limpa o estado local
        this.clearAuth()
        console.log('‚úÖ [AUTH STORE] Logout conclu√≠do')
      }
    },

    /**
     * Limpa todos os dados de autentica√ß√£o
     * Origem: Logout, erro de token, reset de sess√£o
     * Efeitos: Estado limpo, localStorage limpo
     */
    clearAuth() {
      console.log('üßπ [AUTH STORE] Limpando dados de autentica√ß√£o')
      
      this.user = null
      this.token = null
      this.loginError = null
      this.registerError = null
      
      // Remove do localStorage
      localStorage.removeItem('auth_token')
      
      console.log('‚úÖ [AUTH STORE] Dados limpos')
    },

    /**
     * Inicializa o store verificando token existente
     * Origem: Inicializa√ß√£o do app (main.js ou App.vue)
     * Efeitos: Restaura sess√£o se token v√°lido
     */
    async initialize() {
      if (this.isInitialized) {
        console.log('‚ö†Ô∏è [AUTH STORE] J√° foi inicializado')
        return
      }

      console.log('üöÄ [AUTH STORE] Inicializando autentica√ß√£o')
      this.isLoading = true

      try {
        // Se h√° token no localStorage, tenta restaurar sess√£o
        if (this.token) {
          console.log('üîç [AUTH STORE] Token encontrado, verificando validade')
          await this.fetchUser()
        } else {
          console.log('‚ÑπÔ∏è [AUTH STORE] Nenhum token encontrado')
        }
        
      } catch (error) {
        console.warn('‚ö†Ô∏è [AUTH STORE] Erro na inicializa√ß√£o:', error.message)
        
        // Se for erro de recurs√£o infinita, n√£o tentar novamente
        if (error.message && error.message.includes('infinite recursion')) {
          console.error('üî• [AUTH STORE] Erro de recurs√£o infinita detectado - limpando auth')
          this.clearAuth()
          
          // Notificar usu√°rio sobre problema no servidor
          if (window.Quasar && window.Quasar.Notify) {
            window.Quasar.Notify.create({
              type: 'negative',
              message: 'Problema de configura√ß√£o no servidor. Voc√™ foi deslogado.',
              position: 'top',
              timeout: 8000
            })
          }
        } else {
          this.clearAuth()
        }
        
      } finally {
        this.isInitialized = true
        this.isLoading = false
        console.log('‚úÖ [AUTH STORE] Inicializa√ß√£o conclu√≠da')
      }
    },

    /**
     * Atualiza dados do usu√°rio no estado
     * Origem: P√°gina de perfil, ap√≥s atualiza√ß√£o
     * Efeitos: Estado sincronizado com dados atualizados
     */
    updateUser(userData) {
      console.log('üîÑ [AUTH STORE] Atualizando dados do usu√°rio no estado')
      
      if (this.user) {
        // Mescla dados novos com existentes
        this.user = { ...this.user, ...userData }
        console.log('‚úÖ [AUTH STORE] Dados do usu√°rio atualizados')
      }
    },

    /**
     * Limpa erros de autentica√ß√£o
     * Origem: Formul√°rios de login/registro
     * Efeitos: Erros resetados para nova tentativa
     */
    clearErrors() {
      this.loginError = null
      this.registerError = null
    }
  }
})